"use client"

import type React from "react"
import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Loader2, CheckCircle, XCircle, Sparkles, FileText } from "lucide-react"
import { ContentLoadingScreen } from "@/components/loading-screen"

interface FormData {
  name: string
  email: string
  researchTopic: string
}

interface BlogResponse {
  output?: string
  blogPost?: string
  title?: string
  content?: string
  message?: string
  [key: string]: any
}

export default function BlogGenerator() {
  const [formData, setFormData] = useState<FormData>({
    name: "",
    email: "",
    researchTopic: "",
  })
  const [isLoading, setIsLoading] = useState(false)
  const [message, setMessage] = useState<{ type: "success" | "error"; text: string } | null>(null)
  const [blogResponse, setBlogResponse] = useState<BlogResponse | null>(null)
  const [debugInfo, setDebugInfo] = useState<string>("")

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }))
  }

  if (isLoading) {
    return <ContentLoadingScreen />
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setMessage(null)
    setBlogResponse(null)
    setDebugInfo("")

    const requestBody = {
      name: formData.name,
      email: formData.email,
      research_topic: formData.researchTopic,
      timestamp: new Date().toISOString(),
    }

    try {
      const controller = new AbortController()
      const timeoutId = setTimeout(() => controller.abort(), 30000)

      const response = await fetch("https://n8n.srv832341.hstgr.cloud/webhook/web-hook", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
          "Access-Control-Allow-Origin": "*",
        },
        body: JSON.stringify(requestBody),
        signal: controller.signal,
        mode: "cors",
      })

      clearTimeout(timeoutId)

      if (!response.ok) {
        const errorText = await response.text()
        setDebugInfo(`HTTP Error: ${response.status} - ${errorText}`)
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }

      const responseData = await response.json()
      setBlogResponse(responseData)
      setDebugInfo(`Success: ${JSON.stringify(responseData, null, 2)}`)
      setMessage({ type: "success", text: "Blog post generated successfully!" })
    } catch (error) {
      let errorMessage = "Failed to generate your blog post. "
      let debugMessage = ""

      if (error instanceof Error) {
        if (error.name === "AbortError") {
          errorMessage += "Request timed out after 30 seconds."
          debugMessage = "Request timeout - the webhook took too long to respond"
        } else if (error.message === "Failed to fetch") {
          errorMessage += "Network error or CORS issue. Please check your connection."
          debugMessage = "CORS or network error - the webhook may not be accessible from the browser"
        } else {
          errorMessage += error.message
          debugMessage = `Error: ${error.name} - ${error.message}`
        }
      } else {
        errorMessage += "Unknown error occurred."
        debugMessage = `Unknown error: ${String(error)}`
      }

      setDebugInfo(debugMessage)
      setMessage({ type: "error", text: errorMessage })

      if (process.env.NODE_ENV === "development") {
        const simulatedResponse = {
          output:
            `# Sample Blog Post\n\nThis is a simulated response because the webhook is not accessible.\n\n## Introduction\n\nThis would normally be generated by your n8n webhook based on the research topic: **${formData.researchTopic}**\n\n## Main Content\n\nYour actual blog content would appear here with proper formatting and structure.\n\n## Conclusion\n\nThis demonstrates how the response would be displayed once your webhook is properly configured.`,
        }

        setTimeout(() => {
          setBlogResponse(simulatedResponse)
          setMessage({ type: "success", text: "Using simulated response (webhook not accessible)" })
        }, 1000)
      }
    } finally {
      setIsLoading(false)
    }
  }

  const parseMarkdownToHTML = (markdown: string) => {
    if (!markdown) return ""
    return (
      markdown
        .replace(/^### (.*$)/gim, '<h3 class="text-lg font-semibold text-gray-900 dark:text-white font-poppins mb-2 mt-4">$1</h3>')
        .replace(/^## (.*$)/gim, '<h2 class="text-xl font-semibold text-gray-900 dark:text-white font-poppins mb-3 mt-6">$1</h2>')
        .replace(/^# (.*$)/gim, '<h1 class="text-2xl font-bold text-gray-900 dark:text-white font-poppins mb-4 mt-8 first:mt-0">$1</h1>')
        .replace(/\*\*(.*?)\*\*/g, '<strong class="font-semibold text-gray-900 dark:text-white">$1</strong>')
        .split(/\n\s*\n/)
        .map((paragraph) => {
          const trimmed = paragraph.trim()
          if (!trimmed) return ""
          if (trimmed.match(/^<h[1-6]/)) return trimmed
          const withBreaks = trimmed.replace(/\n/g, "<br />")
          return `<p class="text-gray-500 dark:text-gray-400 font-inter mb-4 leading-relaxed">${withBreaks}</p>`
        })
        .filter(Boolean)
        .join("")
    )
  }

  const renderBlogContent = () => {
    if (!blogResponse) return null

    let content = ""
    if (Array.isArray(blogResponse)) {
      const firstItem = blogResponse[0]
      if (firstItem && typeof firstItem === "object") {
        content = firstItem.output || firstItem.blogPost || firstItem.content || firstItem.message
      }
    } else {
      content =
        blogResponse.output ||
        blogResponse.blogPost ||
        blogResponse.content ||
        blogResponse.message ||
        blogResponse.data?.output ||
        blogResponse.data?.content
    }

    if (!content) {
      return (
        <div className="space-y-4">
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white font-poppins">Your blog post is</h2>
          <div className="bg-yellow-50 dark:bg-yellow-900 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4">
            <p className="text-yellow-800 dark:text-yellow-100 font-inter mb-2">Response received but no content found</p>
            <details className="text-sm">
              <summary className="cursor-pointer text-yellow-600 dark:text-yellow-300 font-medium">View Raw Response</summary>
              <pre className="mt-2 text-xs text-yellow-700 dark:text-yellow-200 whitespace-pre-wrap">
                {JSON.stringify(blogResponse, null, 2)}
              </pre>
            </details>
          </div>
        </div>
      )
    }

    const htmlContent = parseMarkdownToHTML(content)

    return (
      <div className="space-y-6">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white font-poppins">Your blog post is</h2>
        <div className="prose prose-lg max-w-none dark:prose-invert" dangerouslySetInnerHTML={{ __html: htmlContent }} />
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-[#0a0a0a] text-gray-900 dark:text-white">
      {/* Header */}
      <div className="bg-gradient-to-r from-orange-50 to-orange-100 dark:from-zinc-900 dark:to-zinc-900 border-b border-gray-200 dark:border-gray-800">
        <div className="max-w-7xl mx-auto px-6 py-8 text-center">
          <div className="flex items-center justify-center space-x-3 mb-4">
            <div className="w-10 h-10 bg-[#FF7435] rounded-lg flex items-center justify-center">
              <Sparkles className="w-6 h-6 text-white" />
            </div>
            <h1 className="text-3xl font-bold font-poppins">Blog Post Generator</h1>
          </div>
          <p className="text-gray-500 dark:text-gray-400 font-inter text-lg max-w-2xl mx-auto">
            Create engaging blog posts tailored to your research topic and audience
          </p>
        </div>
      </div>

      {/* Main */}
      <div className="flex flex-col md:flex-row h-auto md:h-[calc(100vh-180px)]">
        {/* Form */}
        <div className="w-full md:w-1/2 bg-gray-50 dark:bg-[#0a0a0a] p-8 overflow-y-auto">
          <div className="max-w-md mx-auto">
            <div className="bg-white dark:bg-[#111111] rounded-2xl p-8 shadow-sm border border-gray-100 dark:border-gray-800">
              <div className="mb-6">
                <h2 className="text-xl font-semibold font-poppins mb-2">Generate Your Content</h2>
                <p className="text-gray-500 dark:text-gray-400 font-inter">Fill in the details below to create perfect blog posts</p>
              </div>

              <form onSubmit={handleSubmit} className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="name" className="font-medium font-inter">Name</Label>
                  <Input
                    id="name"
                    name="name"
                    type="text"
                    value={formData.name}
                    onChange={handleInputChange}
                    required
                    className="bg-gray-50 dark:bg-zinc-800 border-gray-200 dark:border-zinc-700 focus:border-[#FF7435] focus:ring-[#FF7435] font-inter rounded-lg"
                    placeholder="Enter your name"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="email" className="font-medium font-inter">Email</Label>
                  <Input
                    id="email"
                    name="email"
                    type="email"
                    value={formData.email}
                    onChange={handleInputChange}
                    required
                    className="bg-gray-50 dark:bg-zinc-800 border-gray-200 dark:border-zinc-700 focus:border-[#FF7435] focus:ring-[#FF7435] font-inter rounded-lg"
                    placeholder="Enter your email"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="researchTopic" className="font-medium font-inter">
                    Research Topic for Blog
                  </Label>
                  <Textarea
                    id="researchTopic"
                    name="researchTopic"
                    value={formData.researchTopic}
                    onChange={handleInputChange}
                    required
                    rows={6}
                    className="bg-gray-50 dark:bg-zinc-800 border-gray-200 dark:border-zinc-700 focus:border-[#FF7435] focus:ring-[#FF7435] font-inter resize-none rounded-lg"
                    placeholder="Describe what your blog post is about..."
                  />
                </div>

                <Button
                  type="submit"
                  disabled={isLoading}
                  className="w-full bg-[#FF7435] hover:bg-[#E6681F] dark:hover:bg-[#d45616] text-white font-semibold rounded-lg transition-colors duration-200 font-inter"
                  style={{ padding: "16px", fontWeight: 600 }}
                >
                  {isLoading ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    "Generate"
                  )}
                </Button>
              </form>

              {message && (
                <Alert
                  className={`mt-4 ${
                    message.type === "success"
                      ? "bg-green-50 dark:bg-green-900 border-green-200 dark:border-green-800 text-green-800 dark:text-green-100"
                      : "bg-red-50 dark:bg-red-900 border-red-200 dark:border-red-800 text-red-800 dark:text-red-100"
                  }`}
                >
                  <div className="flex items-center">
                    {message.type === "success" ? (
                      <CheckCircle className="w-4 h-4 mr-2" />
                    ) : (
                      <XCircle className="w-4 h-4 mr-2" />
                    )}
                    <AlertDescription className="font-inter">{message.text}</AlertDescription>
                  </div>
                </Alert>
              )}

              {debugInfo && (
                <details className="mt-4 text-xs">
                  <summary className="cursor-pointer text-gray-500 dark:text-gray-400 font-inter">Debug Information</summary>
                  <pre className="mt-2 p-2 bg-gray-100 dark:bg-zinc-800 rounded text-gray-600 dark:text-gray-300 whitespace-pre-wrap overflow-auto max-h-32">
                    {debugInfo}
                  </pre>
                </details>
              )}
            </div>
          </div>
        </div>

        {/* Output */}
        <div className="w-full md:w-1/2 bg-white dark:bg-[#111111] p-8 overflow-y-auto border-t md:border-t-0 md:border-l border-gray-200 dark:border-gray-800">
          <div className="max-w-2xl mx-auto">
            {blogResponse ? (
              renderBlogContent()
            ) : (
              <div className="flex items-center justify-center h-full min-h-[400px]">
                <div className="text-center space-y-4">
                  <div className="w-16 h-16 bg-gray-100 dark:bg-zinc-800 rounded-full flex items-center justify-center mx-auto">
                    <FileText className="w-8 h-8 text-gray-400 dark:text-gray-500" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white font-poppins mb-2">
                      Your blog post will appear here
                    </h3>
                    <p className="text-gray-500 dark:text-gray-400 font-inter">Fill out the form and click generate to get started</p>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
