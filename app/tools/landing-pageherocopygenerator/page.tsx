"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Loader2, Copy, Download, Sparkles, Target, Users, Zap } from "lucide-react"
import { ContentLoadingScreen } from "@/components/loading-screen"

interface HeroCopyResult {
  headline: string
  subheadline: string
  cta: string
  valueProposition: string
  socialProof: string
}

export default function LandingPageHeroCopyGenerator() {
  const [isLoading, setIsLoading] = useState(false)
  const [result, setResult] = useState<HeroCopyResult | null>(null)
  const [formData, setFormData] = useState({
    businessName: "",
    industry: "",
    targetAudience: "",
    mainBenefit: "",
    uniqueSellingPoint: "",
    tone: "professional",
    callToAction: "",
  })

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)

    // Simulate API call
    setTimeout(() => {
      const mockResult: HeroCopyResult = {
        headline: `Transform Your ${formData.industry} Business with ${formData.businessName}`,
        subheadline: `${formData.mainBenefit} - ${formData.uniqueSellingPoint}. Join thousands of satisfied customers who trust our solution.`,
        cta: formData.callToAction || "Get Started Today",
        valueProposition: `Experience the power of ${formData.mainBenefit.toLowerCase()} designed specifically for ${formData.targetAudience.toLowerCase()}. Our proven system delivers results that matter.`,
        socialProof: `"${formData.businessName} helped us achieve incredible results. Highly recommended!" - Satisfied Customer`,
      }
      setResult(mockResult)
      setIsLoading(false)
    }, 3000)
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
  }

  const downloadResult = () => {
    if (!result) return

    const content = `
Landing Page Hero Copy for ${formData.businessName}

HEADLINE:
${result.headline}

SUBHEADLINE:
${result.subheadline}

VALUE PROPOSITION:
${result.valueProposition}

CALL TO ACTION:
${result.cta}

SOCIAL PROOF:
${result.socialProof}

Generated by Kozker.com Landing Page Hero Copy Generator
    `.trim()

    const element = document.createElement("a")
    const file = new Blob([content], { type: "text/plain" })
    element.href = URL.createObjectURL(file)
    element.download = `${formData.businessName}-hero-copy.txt`
    document.body.appendChild(element)
    element.click()
    document.body.removeChild(element)
  }

  if (isLoading) {
    return <ContentLoadingScreen />
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        <div className="text-center mb-12">
          <div className="flex justify-center mb-4">
            <div className="p-3 bg-primary rounded-2xl">
              <Sparkles className="w-8 h-8 text-white" />
            </div>
          </div>
          <h1 className="text-4xl font-bold text-gray-900 mb-4">Landing Page Hero Copy Generator</h1>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            Create compelling hero sections that convert visitors into customers with AI-powered copywriting
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Target className="w-5 h-5" />
                Business Information
              </CardTitle>
              <CardDescription>Tell us about your business to generate targeted hero copy</CardDescription>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmit} className="space-y-6">
                <div>
                  <Label htmlFor="businessName">Business Name *</Label>
                  <Input
                    id="businessName"
                    value={formData.businessName}
                    onChange={(e) => setFormData({ ...formData, businessName: e.target.value })}
                    placeholder="Enter your business name"
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="industry">Industry *</Label>
                  <Input
                    id="industry"
                    value={formData.industry}
                    onChange={(e) => setFormData({ ...formData, industry: e.target.value })}
                    placeholder="e.g., SaaS, E-commerce, Consulting"
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="targetAudience">Target Audience *</Label>
                  <Input
                    id="targetAudience"
                    value={formData.targetAudience}
                    onChange={(e) => setFormData({ ...formData, targetAudience: e.target.value })}
                    placeholder="e.g., Small business owners, Marketing managers"
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="mainBenefit">Main Benefit *</Label>
                  <Textarea
                    id="mainBenefit"
                    value={formData.mainBenefit}
                    onChange={(e) => setFormData({ ...formData, mainBenefit: e.target.value })}
                    placeholder="What's the primary benefit your product/service provides?"
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="uniqueSellingPoint">Unique Selling Point *</Label>
                  <Textarea
                    id="uniqueSellingPoint"
                    value={formData.uniqueSellingPoint}
                    onChange={(e) => setFormData({ ...formData, uniqueSellingPoint: e.target.value })}
                    placeholder="What makes you different from competitors?"
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="tone">Tone</Label>
                  <Select value={formData.tone} onValueChange={(value) => setFormData({ ...formData, tone: value })}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="professional">Professional</SelectItem>
                      <SelectItem value="friendly">Friendly</SelectItem>
                      <SelectItem value="urgent">Urgent</SelectItem>
                      <SelectItem value="playful">Playful</SelectItem>
                      <SelectItem value="authoritative">Authoritative</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="callToAction">Preferred Call to Action</Label>
                  <Input
                    id="callToAction"
                    value={formData.callToAction}
                    onChange={(e) => setFormData({ ...formData, callToAction: e.target.value })}
                    placeholder="e.g., Get Started Free, Book a Demo"
                  />
                </div>

                <Button type="submit" className="w-full" disabled={isLoading}>
                  {isLoading ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      Generating Hero Copy...
                    </>
                  ) : (
                    <>
                      <Zap className="w-4 h-4 mr-2" />
                      Generate Hero Copy
                    </>
                  )}
                </Button>
              </form>
            </CardContent>
          </Card>

          <div className="space-y-6">
            {result && (
              <>
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center justify-between">
                      <span className="flex items-center gap-2">
                        <Users className="w-5 h-5" />
                        Generated Hero Copy
                      </span>
                      <div className="flex gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() =>
                            copyToClipboard(
                              `${result.headline}\n\n${result.subheadline}\n\n${result.valueProposition}\n\n${result.cta}\n\n${result.socialProof}`,
                            )
                          }
                        >
                          <Copy className="w-4 h-4 mr-1" />
                          Copy All
                        </Button>
                        <Button variant="outline" size="sm" onClick={downloadResult}>
                          <Download className="w-4 h-4 mr-1" />
                          Download
                        </Button>
                      </div>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    <div>
                      <h3 className="font-semibold text-lg mb-2">Headline</h3>
                      <div className="p-4 bg-gray-50 rounded-lg">
                        <p className="text-2xl font-bold text-gray-900">{result.headline}</p>
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="mt-2"
                        onClick={() => copyToClipboard(result.headline)}
                      >
                        <Copy className="w-4 h-4 mr-1" />
                        Copy Headline
                      </Button>
                    </div>

                    <div>
                      <h3 className="font-semibold text-lg mb-2">Subheadline</h3>
                      <div className="p-4 bg-gray-50 rounded-lg">
                        <p className="text-lg text-gray-700">{result.subheadline}</p>
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="mt-2"
                        onClick={() => copyToClipboard(result.subheadline)}
                      >
                        <Copy className="w-4 h-4 mr-1" />
                        Copy Subheadline
                      </Button>
                    </div>

                    <div>
                      <h3 className="font-semibold text-lg mb-2">Value Proposition</h3>
                      <div className="p-4 bg-gray-50 rounded-lg">
                        <p className="text-gray-700">{result.valueProposition}</p>
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="mt-2"
                        onClick={() => copyToClipboard(result.valueProposition)}
                      >
                        <Copy className="w-4 h-4 mr-1" />
                        Copy Value Prop
                      </Button>
                    </div>

                    <div>
                      <h3 className="font-semibold text-lg mb-2">Call to Action</h3>
                      <div className="p-4 bg-gray-50 rounded-lg">
                        <p className="font-semibold text-primary">{result.cta}</p>
                      </div>
                      <Button variant="ghost" size="sm" className="mt-2" onClick={() => copyToClipboard(result.cta)}>
                        <Copy className="w-4 h-4 mr-1" />
                        Copy CTA
                      </Button>
                    </div>

                    <div>
                      <h3 className="font-semibold text-lg mb-2">Social Proof</h3>
                      <div className="p-4 bg-gray-50 rounded-lg">
                        <p className="italic text-gray-700">{result.socialProof}</p>
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="mt-2"
                        onClick={() => copyToClipboard(result.socialProof)}
                      >
                        <Copy className="w-4 h-4 mr-1" />
                        Copy Social Proof
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </>
            )}

            {!result && (
              <Card>
                <CardContent className="p-12 text-center">
                  <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <Sparkles className="w-8 h-8 text-gray-400" />
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">Ready to Generate Hero Copy</h3>
                  <p className="text-gray-600">
                    Fill out the form to generate compelling hero copy for your landing page
                  </p>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
